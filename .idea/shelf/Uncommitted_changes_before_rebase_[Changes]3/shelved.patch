Index: backend/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Logs\r\nlogs\r\n*.log\r\nnpm-debug.log*\r\nyarn-debug.log*\r\nyarn-error.log*\r\nfirebase-debug.log*\r\nfirebase-debug.*.log*\r\n\r\n# Firebase cache\r\n.firebase/\r\n\r\n# Firebase config\r\n\r\n# Uncomment this if you'd like others to create their own Firebase project.\r\n# For a team working on the same Firebase project(s), it is recommended to leave\r\n# it commented so all members can deploy to the same project(s) in .firebaserc.\r\n# .firebaserc\r\n\r\n# Runtime data\r\npids\r\n*.pid\r\n*.seed\r\n*.pid.lock\r\n\r\n# Directory for instrumented libs generated by jscoverage/JSCover\r\nlib-cov\r\n\r\n# Coverage directory used by tools like istanbul\r\ncoverage\r\n\r\n# nyc test coverage\r\n.nyc_output\r\n\r\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\r\n.grunt\r\n\r\n# Bower dependency directory (https://bower.io/)\r\nbower_components\r\n\r\n# node-waf configuration\r\n.lock-wscript\r\n\r\n# Compiled binary addons (http://nodejs.org/api/addons.html)\r\nbuild/Release\r\n\r\n# Dependency directories\r\nnode_modules/\r\n\r\n# Optional npm cache directory\r\n.npm\r\n\r\n# Optional eslint cache\r\n.eslintcache\r\n\r\n# Optional REPL history\r\n.node_repl_history\r\n\r\n# Output of 'npm pack'\r\n*.tgz\r\n\r\n# Yarn Integrity file\r\n.yarn-integrity\r\n\r\n# dotenv environment variables file\r\n.env\r\n\r\n# dataconnect generated files\r\n.dataconnect\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/.gitignore b/backend/.gitignore
--- a/backend/.gitignore	(revision dccd8a835b13660f0d93f8a0020c1a98e0774dff)
+++ b/backend/.gitignore	(date 1757806086123)
@@ -67,3 +67,7 @@
 
 # dataconnect generated files
 .dataconnect
+
+/functions/lib/*
+/functions/node_modules
+/functions/src/config/serviceAccount.json
\ No newline at end of file
Index: backend/firebase.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"functions\": [\r\n    {\r\n      \"source\": \"functions\",\r\n      \"codebase\": \"default\",\r\n      \"ignore\": [\r\n        \"node_modules\",\r\n        \".git\",\r\n        \"firebase-debug.log\",\r\n        \"firebase-debug.*.log\",\r\n        \"*.local\"\r\n      ],\r\n      \"predeploy\": [\r\n        \"npm --prefix \\\"$RESOURCE_DIR\\\" run lint\",\r\n        \"npm --prefix \\\"$RESOURCE_DIR\\\" run build\"\r\n      ]\r\n    }\r\n  ]\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/firebase.json b/backend/firebase.json
--- a/backend/firebase.json	(revision dccd8a835b13660f0d93f8a0020c1a98e0774dff)
+++ b/backend/firebase.json	(date 1757806086130)
@@ -1,7 +1,6 @@
 {
   "functions": [
     {
-      "source": "functions",
       "codebase": "default",
       "ignore": [
         "node_modules",
@@ -13,7 +12,22 @@
       "predeploy": [
         "npm --prefix \"$RESOURCE_DIR\" run lint",
         "npm --prefix \"$RESOURCE_DIR\" run build"
-      ]
-    }
-  ]
+      ],
+      "source": "functions"
+    }
+  ],
+  "hosting": {
+    "public": "public",
+    "ignore": [
+      "firebase.json",
+      "**/.*",
+      "**/node_modules/**"
+    ],
+    "rewrites": [
+      {
+        "source": "**",
+        "destination": "/index.html"
+      }
+    ]
+  }
 }
Index: backend/functions/src/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {setGlobalOptions} from \"firebase-functions\";\r\nimport {onRequest} from \"firebase-functions/v2/https\";\r\nimport corsMiddleware from './middleware/cors';\r\nimport {TaskController, UserController} from './controllers';\r\nimport {authRequired} from \"./middleware/auth\";\r\n\r\n// For cost control and performance\r\nsetGlobalOptions({ maxInstances: 10 });\r\n\r\n// Initialize controllers\r\nconst userController = new UserController();\r\nconst taskController = new TaskController();\r\n\r\n// User Functions\r\nexport const findUser = onRequest(\r\n  { cors: true },\r\n  async (req, res) => {\r\n    corsMiddleware(req, res, async () => {\r\n      if (req.method !== 'POST') {\r\n        res.status(405).json({ error: 'Method not allowed' });\r\n        return;\r\n      }\r\n      await userController.findUser(req, res);\r\n    });\r\n  }\r\n);\r\n\r\nexport const addUser = onRequest(\r\n  { cors: true },\r\n  async (req, res) => {\r\n    corsMiddleware(req, res, async () => {\r\n      if (req.method !== 'POST') {\r\n        res.status(405).json({ error: 'Method not allowed' });\r\n        return;\r\n      }\r\n      await userController.addUser(req, res);\r\n    });\r\n  }\r\n);\r\n\r\n// Task Functions\r\nexport const getTasks = onRequest(\r\n  { cors: true },\r\n  async (req, res) => {\r\n    corsMiddleware(req, res, () => {\r\n        authRequired(req, res, async () => {\r\n            if (req.method !== 'GET') {\r\n                res.status(405).json({ error: 'Method not allowed' });\r\n                return;\r\n            }\r\n            await taskController.getTasks(req, res);\r\n        })\r\n    });\r\n  }\r\n);\r\n\r\nexport const addTask = onRequest(\r\n  { cors: true },\r\n  async (req, res) => {\r\n    corsMiddleware(req, res, () => {\r\n        authRequired(req, res, async () => {\r\n            if (req.method !== 'POST') {\r\n                res.status(405).json({ error: 'Method not allowed' });\r\n                return;\r\n            }\r\n            await taskController.addTask(req, res);\r\n        })\r\n    });\r\n  }\r\n);\r\n\r\nexport const updateTask = onRequest(\r\n  { cors: true },\r\n  async (req, res) => {\r\n    corsMiddleware(req, res, () => {\r\n        authRequired(req, res, async () => {\r\n            if (req.method !== 'PUT') {\r\n                res.status(405).json({ error: 'Method not allowed' });\r\n                return;\r\n            }\r\n            await taskController.updateTask(req, res);\r\n        })\r\n    });\r\n  }\r\n);\r\n\r\nexport const deleteTask = onRequest(\r\n  { cors: true },\r\n  async (req, res) => {\r\n    corsMiddleware(req, res, () => {\r\n        authRequired(req, res, async () => {\r\n            if (req.method !== 'DELETE') {\r\n                res.status(405).json({ error: 'Method not allowed' });\r\n                return;\r\n            }\r\n            await taskController.deleteTask(req, res);\r\n        })\r\n    });\r\n  }\r\n);\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/functions/src/index.ts b/backend/functions/src/index.ts
--- a/backend/functions/src/index.ts	(revision dccd8a835b13660f0d93f8a0020c1a98e0774dff)
+++ b/backend/functions/src/index.ts	(date 1757806086138)
@@ -13,7 +13,7 @@
 
 // User Functions
 export const findUser = onRequest(
-  { cors: true },
+  { cors: true, serviceAccount: 'firebase-adminsdk-fbsvc@challenges-64ca3.iam.gserviceaccount.com' },
   async (req, res) => {
     corsMiddleware(req, res, async () => {
       if (req.method !== 'POST') {
@@ -26,7 +26,7 @@
 );
 
 export const addUser = onRequest(
-  { cors: true },
+  { cors: true, serviceAccount: 'firebase-adminsdk-fbsvc@challenges-64ca3.iam.gserviceaccount.com' },
   async (req, res) => {
     corsMiddleware(req, res, async () => {
       if (req.method !== 'POST') {
@@ -40,7 +40,7 @@
 
 // Task Functions
 export const getTasks = onRequest(
-  { cors: true },
+  { cors: true, serviceAccount: 'firebase-adminsdk-fbsvc@challenges-64ca3.iam.gserviceaccount.com' },
   async (req, res) => {
     corsMiddleware(req, res, () => {
         authRequired(req, res, async () => {
@@ -55,7 +55,7 @@
 );
 
 export const addTask = onRequest(
-  { cors: true },
+  { cors: true, serviceAccount: 'firebase-adminsdk-fbsvc@challenges-64ca3.iam.gserviceaccount.com' },
   async (req, res) => {
     corsMiddleware(req, res, () => {
         authRequired(req, res, async () => {
@@ -70,7 +70,7 @@
 );
 
 export const updateTask = onRequest(
-  { cors: true },
+  { cors: true, serviceAccount: 'firebase-adminsdk-fbsvc@challenges-64ca3.iam.gserviceaccount.com' },
   async (req, res) => {
     corsMiddleware(req, res, () => {
         authRequired(req, res, async () => {
@@ -85,7 +85,7 @@
 );
 
 export const deleteTask = onRequest(
-  { cors: true },
+  { cors: true, serviceAccount: 'firebase-adminsdk-fbsvc@challenges-64ca3.iam.gserviceaccount.com' },
   async (req, res) => {
     corsMiddleware(req, res, () => {
         authRequired(req, res, async () => {
